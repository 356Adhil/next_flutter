{"version":3,"file":"static/js/9194.3e2c1786.chunk.js","mappings":"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","sources":["components/project/pages/registrationFormData/index.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport Layout from \"../../../core/layout\";\nimport ListTable from \"../../../core/list/list\";\nimport { Container } from \"../../../core/layout/styels\";\nimport { getData, postData } from \"../../../../backend/api\";\n//src/components/styles/page/index.js\n//if you want to write custom style wirte in above file\nconst RegistrationFormData = (props) => {\n  //to update the page title\n  useEffect(() => {\n    document.title = `Responses - EventHex Portal`;\n  }, []);\n  const data = useMemo(() => props.openData.data, [props.openData.data]);\n  const [attributes, setSubAttributes] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const type = useMemo(() => props.openData.data.type ?? \"Ticket\", [props.openData.data.type]);\n  useEffect(() => {\n    const getTickets = async () => {\n      setLoading(true);\n      const response = await getData({ ticket: data._id, eventId: data.event._id ?? data.event }, \"ticket-form-data\");\n      const ticket = response.data.ticketData.event.countries;\n      if (response.status === 200) {\n        const abstract =\n          data.enableAbstract ?? false\n            ? [\n                {\n                  type: \"file\",\n                  placeholder: \"Abstract\",\n                  name: \"abstract\",\n                  validation: \"\",\n                  default: \"\",\n                  label: \"Abstract\",\n                  collection: \"\",\n                  showItem: \"\",\n                  required: true,\n                  view: true,\n                  tag: true,\n                  export: true,\n                },\n                {\n                  type: \"checkbox\",\n                  placeholder: \"Abstract Uploaded\",\n                  name: \"abstractUploaded\",\n                  validation: \"\",\n                  default: \"\",\n                  label: \"Abstract Uploaded\",\n                  collection: \"\",\n                  showItem: \"\",\n                  required: true,\n                  view: true,\n                  tag: true,\n                  export: true,\n                  filter: true,\n                },\n              ]\n            : [];\n        const formFields = [\n          ...[...(type === \"Ticket\" ? response.data.eventForm : []), ...response.data.response].map((attribute) => {\n            const formattedAttribute = { ...attribute };\n\n            if (formattedAttribute.conditionEnabled) {\n              formattedAttribute.condition = {\n                item: formattedAttribute.conditionWhenField,\n                if: formattedAttribute.conditionCheckMatch.includes(\",\") ? formattedAttribute.conditionCheckMatch.split(\",\") : [formattedAttribute.conditionCheckMatch],\n                then: formattedAttribute.conditionIfMatch === \"enabled\" ? \"enabled\" : \"disabled\",\n                else: formattedAttribute.conditionIfMatch === \"enabled\" ? \"disabled\" : \"enabled\",\n              };\n            }\n    \n            if (formattedAttribute.type === \"select\") {\n              formattedAttribute.search = true;\n              formattedAttribute.filter = true;\n            } else {\n              formattedAttribute.filter = false;\n            }\n            if (![\"file\", \"image\"].includes(formattedAttribute.name)) {\n              formattedAttribute.sort = true;\n            }\n    \n            if (formattedAttribute.type === \"multiSelect\") {\n              if (formattedAttribute.apiType === \"CSV\") {\n                formattedAttribute.selectApi = formattedAttribute.selectApi\n                  .toString()\n                  .split(\",\")\n                  .map((item) => ({\n                    id: item,\n                    value: item,\n                  }));\n                formattedAttribute.apiType = \"JSON\";\n              }\n              formattedAttribute.default = \"\";\n            }\n    \n            if ([\"firstName\", \"authenticationId\", \"emailId\"].includes(formattedAttribute.name)) {\n              formattedAttribute.collection = \"\";\n              if (formattedAttribute.name === \"authenticationId\" && ticket?.event?.countries) {\n                formattedAttribute.countries = ticket.event.countries;\n              }\n            } else {\n              formattedAttribute.collection = \"formData\";\n            }\n    \n            formattedAttribute.showItem = formattedAttribute.name;\n            formattedAttribute.update = true;\n            if (!formattedAttribute.type === \"title\" && !formattedAttribute.type === \"info\") {\n              formattedAttribute.tag = true;\n              formattedAttribute.view = true;\n            }\n            formattedAttribute.export = true;\n    \n            return formattedAttribute;\n          }),\n          ...abstract,\n          {\n            type: \"datetime\",\n            placeholder: \"Registered On\",\n            name: \"createdAt\",\n            validation: \"\",\n            default: \"\",\n            label: \"Registered On\",\n            minimum: 0,\n            maximum: 16,\n            required: true,\n            view: true,\n            tag: true,\n          },\n          {\n            type: \"select\",\n            placeholder: \"Approval\",\n            name: \"approve\",\n            validation: \"\",\n            default: \"\",\n            collection: \"\",\n            label: \"Approval\",\n            required: false,\n            selectApi: [\n              { id: true, value: \"Approved\" },\n              { id: false, value: \"Pending\" },\n            ],\n            apiType: \"JSON\",\n            view: true,\n            tag: true,\n            add: false,\n            filter: true,\n            export: true,\n          },\n          {\n            type: \"text\",\n            placeholder: \"_id\",\n            name: \"_id\",\n            validation: \"\",\n            default: \"\",\n            label: \"_id\",\n            minimum: 5,\n            maximum: 40,\n            required: true,\n            view: false,\n            tag: false,\n            export: true,\n          },\n        ];\n        if (!attributes) {\n          setSubAttributes(formFields);\n        }\n      }\n    };\n    if (!attributes && !loading) {\n      getTickets();\n    }\n  }, [data, attributes, loading, type]);\n\n  const getApproved = (id, refreshView, slNo, api) => {\n    props.setLoaderBox(true);\n    postData({ id }, `authentication/${api}`)\n      .then((response) => {\n        props.setLoaderBox(false);\n        if (response.data) {\n          props.setMessage({\n            type: 1,\n            content: response.data.message,\n            icon: \"success\",\n          });\n          if (api === \"approve\") {\n            refreshView(false, slNo, { approve: true });\n          }\n        } else {\n          // Handle the case where response.data is undefined\n          console.error(\"Response data is undefined.\");\n        }\n      })\n      .catch((error) => {\n        props.setLoaderBox(false);\n        // Handle any errors that occur during the API request\n        console.error(\"API request error:\", error);\n      });\n  };\n\n  const [actions] = useState([\n    {\n      element: \"button\",\n      type: \"callback\",\n      callback: (item, data, refreshView, slNo) => {\n        getApproved(data._id, refreshView, slNo, \"approve\");\n      },\n      itemTitle: {\n        name: \"user\",\n        type: \"text\",\n        collection: \"\",\n      },\n      condition: {\n        item: \"approve\",\n        if: \"false\",\n        then: true,\n        else: false,\n      },\n      icon: \"next\",\n      title: \"Approve\",\n      params: {\n        api: ``,\n        parentReference: \"\",\n        itemTitle: {\n          name: \"user\",\n          type: \"text\",\n          collection: \"\",\n        },\n        shortName: \"Approve\",\n        addPrivilege: true,\n        delPrivilege: true,\n        updatePrivilege: true,\n        customClass: \"medium\",\n      },\n    },\n    {\n      element: \"button\",\n      type: \"callback\",\n      callback: (item, data, refreshView, slNo) => {\n        getApproved(data._id, refreshView, slNo, \"resend\");\n      },\n      itemTitle: {\n        name: \"user\",\n        type: \"text\",\n        collection: \"\",\n      },\n      icon: \"next\",\n      title: \"Resend Confirmation\",\n      params: {\n        api: ``,\n        parentReference: \"\",\n        itemTitle: {\n          name: \"user\",\n          type: \"text\",\n          collection: \"\",\n        },\n        shortName: \"Resend Confirmation\",\n        addPrivilege: true,\n        delPrivilege: true,\n        updatePrivilege: true,\n        customClass: \"medium\",\n      },\n    },\n  ]);\n  // console.log(actions)\n  return (\n    attributes?.length > 0 && (\n      <Container className=\"noshadow\">\n        <ListTable\n          actions={actions}\n          api={`ticket-registration/${data._id}`}\n          itemTitle={{\n            name: \"fullName\",\n            type: \"text\",\n            collection: \"authentication\",\n          }}\n          shortName={`${data.title} Responses`}\n          formMode={`single`}\n          preFilter={{ ticket: data._id, type: type }}\n          bulkUplaod={true}\n          delPrivilege={false}\n          addPrivilege={false}\n          updatePrivilege={false}\n          exportPrivilege={true}\n          viewMode={\"table\"}\n          name={data._id}\n          {...props}\n          attributes={attributes}\n        ></ListTable>\n      </Container>\n    )\n  );\n};\n// exporting the page with parent container layout..\nexport default Layout(RegistrationFormData);\n"],"names":["Layout","props","useEffect","document","title","data","useMemo","openData","attributes","setSubAttributes","useState","loading","setLoading","type","_props$openData$data$","async","_data$event$_id","response","getData","ticket","_id","eventId","event","ticketData","countries","status","_data$enableAbstract","abstract","enableAbstract","placeholder","name","validation","default","label","collection","showItem","required","view","tag","export","filter","formFields","eventForm","map","attribute","formattedAttribute","_ticket$event","conditionEnabled","condition","item","conditionWhenField","if","conditionCheckMatch","includes","split","then","conditionIfMatch","else","search","sort","apiType","selectApi","toString","id","value","update","minimum","maximum","add","getTickets","getApproved","refreshView","slNo","api","setLoaderBox","postData","setMessage","content","message","icon","approve","console","error","catch","actions","element","callback","itemTitle","params","parentReference","shortName","addPrivilege","delPrivilege","updatePrivilege","customClass","length","_jsx","Container","className","children","ListTable","formMode","preFilter","bulkUplaod","exportPrivilege","viewMode"],"sourceRoot":""}