{"version":3,"file":"static/js/9655.30601b48.chunk.js","mappings":"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","sources":["components/project/pages/event/approval/index.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Layout from \"../../../../core/layout\";\nimport ListTable from \"../../../../core/list/list\";\nimport { getData, postData } from \"../../../../../backend/api\";\n\nconst Approval = (props) => {\n  const { id } = props;\n  const [actions] = useState([\n    {\n      element: \"button\",\n      type: \"callback\",\n      callback: (item, data, refreshView, slNo) => {\n        getApproved(data._id, refreshView, slNo, \"approve\");\n      },\n      itemTitle: {\n        name: \"user\",\n        type: \"text\",\n        collection: \"\",\n      },\n      condition: {\n        item: \"approve\",\n        if: \"false\",\n        then: true,\n        else: false,\n      },\n      icon: \"checked\",\n      title: \"Approve\",\n      params: {\n        api: ``,\n        parentReference: \"\",\n        itemTitle: {\n          name: \"user\",\n          type: \"text\",\n          collection: \"\",\n        },\n        shortName: \"Approve\",\n        addPrivilege: true,\n        delPrivilege: true,\n        updatePrivilege: true,\n        customClass: \"medium\",\n      },\n    },\n    {\n      element: \"button\",\n      type: \"callback\",\n      callback: (item, data, refreshView, slNo) => {\n        getApproved(data._id, refreshView, slNo, \"resend\");\n      },\n      itemTitle: {\n        name: \"user\",\n        type: \"text\",\n        collection: \"\",\n      },\n      icon: \"message\",\n      title: \"Resend\",\n      params: {\n        api: ``,\n        parentReference: \"\",\n        itemTitle: {\n          name: \"user\",\n          type: \"text\",\n          collection: \"\",\n        },\n        shortName: \"Resend Confirmation\",\n        addPrivilege: true,\n        delPrivilege: true,\n        updatePrivilege: true,\n        customClass: \"medium\",\n      },\n    },\n  ]);\n  const eventId = props?.openData?.data?._id;\n  const { title, ticketType } = props;\n  const [selectedTab, setSelectedTab] = useState(\"all\");\n  const [ticket, setTicket] = useState(null);\n  const [attributes, setSubAttributes] = useState(null);\n  const [eventAttributes, setEventAttributes] = useState([]);\n  const lastFileds = useMemo(\n    () => [\n      {\n        type: \"datetime\",\n        placeholder: \"Registration Time\",\n        name: \"createdAt\",\n        validation: \"\",\n        default: \"\",\n        label: \"Registration Time\",\n        minimum: 0,\n        maximum: 16,\n        required: true,\n        view: true,\n        tag: true,\n        export: false,\n      },\n    ],\n    []\n  );\n  const formatArray = useCallback(\n    (eventForm, ticket) => {\n      if (!Array.isArray(eventForm)) return [];\n\n      const formFields = eventForm.map((attribute) => {\n        const formattedAttribute = { ...attribute };\n\n        if (formattedAttribute.conditionEnabled) {\n          formattedAttribute.condition = {\n            item: formattedAttribute.conditionWhenField,\n            if: formattedAttribute.conditionCheckMatch.includes(\",\") ? formattedAttribute.conditionCheckMatch.split(\",\") : [formattedAttribute.conditionCheckMatch],\n            then: formattedAttribute.conditionIfMatch === \"enabled\" ? \"enabled\" : \"disabled\",\n            else: formattedAttribute.conditionIfMatch === \"enabled\" ? \"disabled\" : \"enabled\",\n          };\n        }\n\n        if (formattedAttribute.type === \"select\") {\n          formattedAttribute.search = true;\n          formattedAttribute.filter = true;\n        } else {\n          formattedAttribute.filter = false;\n        }\n        if (![\"file\", \"image\"].includes(formattedAttribute.name)) {\n          formattedAttribute.sort = true;\n        }\n\n        if (formattedAttribute.type === \"multiSelect\") {\n          if (formattedAttribute.apiType === \"CSV\") {\n            formattedAttribute.selectApi = formattedAttribute.selectApi\n              .toString()\n              .split(\",\")\n              .map((item) => ({\n                id: item,\n                value: item,\n              }));\n            formattedAttribute.apiType = \"JSON\";\n          }\n          formattedAttribute.default = \"\";\n        }\n\n        if ([\"firstName\", \"authenticationId\", \"emailId\"].includes(formattedAttribute.name)) {\n          formattedAttribute.collection = \"\";\n          if (formattedAttribute.name === \"authenticationId\" && ticket?.event?.countries) {\n            formattedAttribute.countries = ticket.event.countries;\n          }\n        } else {\n          formattedAttribute.collection = \"formData\";\n        }\n\n        formattedAttribute.showItem = formattedAttribute.name;\n        formattedAttribute.update = true;\n        if (!formattedAttribute.type === \"title\" && !formattedAttribute.type === \"info\") {\n          formattedAttribute.tag = true;\n          formattedAttribute.view = true;\n        }\n        formattedAttribute.export = true;\n\n        return formattedAttribute;\n      });\n\n      return [...formFields, ...lastFileds];\n    },\n    [lastFileds]\n  );\n\n  useEffect(() => {\n    document.title = `${title} - EventHex Portal`;\n    getData({ event: props?.openData?.data?._id }, \"event-form-fields\").then((response) => {\n      const fields = formatArray(response?.data?.response);\n      const base = [\n        {\n          type: \"select\",\n          footnote: \"\",\n          placeholder: \"Choose Ticket\",\n          name: \"ticket\",\n          validation: \"\",\n          label: \"Select Ticket\",\n          showItem: \"value\",\n          default: \"all\",\n          value: \"all\",\n          preFill: [\n            {\n              id: \"all\",\n              value: \"All\",\n            },\n          ],\n          required: false,\n          view: false,\n          filter: true,\n          add: false,\n          update: true,\n          apiType: \"API\",\n          selectApi: \"ticket/select/\" + eventId + \"/\" + ticketType,\n          parentFilter: true,\n          export: false,\n        },\n        {\n          type: \"text\",\n          placeholder: \"Ticket\",\n          name: \"showticket\",\n          validation: \"\",\n          collection: \"ticket\",\n          showItem: \"title\",\n          default: \"\",\n          label: \"Ticket\",\n          minimum: 0,\n          maximum: 16,\n          required: true,\n          add: true,\n          view: true,\n          bulkUpload: true,\n          tag: true,\n        },\n      ];\n      setEventAttributes([...base, ...fields]);\n    });\n  }, [props?.openData?.data?._id, formatArray, title, eventId, selectedTab, ticketType]);\n\n  const UpdateFields = async (ticketId) => {\n    props.setLoaderBox(true);\n    try {\n      const response = await getData({ ticket: ticketId, eventId }, \"ticket-form-data\");\n      const { ticketData: ticket, eventForm } = response.data;\n      const country = ticket.event.countries[0] ?? [];\n      setTicket(ticket);\n      if (response.status === 200) {\n        const baseFields = [\n          {\n            type: \"select\",\n            footnote: \"\",\n            placeholder: \"Choose Ticket\",\n            name: \"ticket\",\n            validation: \"\",\n            default: ticketId,\n            value: ticketId,\n            label: \"Select Ticket\",\n            // selectType: \"tabs\",\n            showItem: \"value\",\n            required: false,\n            preFill: [\n              {\n                id: \"all\",\n                value: \"All\",\n              },\n            ],\n            view: true,\n            tag: false,\n            filter: true,\n            add: false,\n            update: false,\n            apiType: \"API\",\n            selectApi: \"ticket/select/\" + eventId + \"/\" + ticketType,\n            parentFilter: true,\n            export: false,\n          },\n          {\n            type: \"hidden\",\n            placeholder: \"PhoneNumberLength\",\n            name: \"PhoneNumberLength\",\n            validation: \"\",\n            showItem: \"PhoneNumberLength\",\n            collection: \"formData\",\n            default: country.PhoneNumberLength,\n            label: \"PhoneNumberLength\",\n            minimum: 1,\n            maximum: 40,\n            required: false,\n            add: true,\n            update: true,\n            export: false,\n            view: false,\n          },\n          {\n            type: \"hidden\",\n            placeholder: \"phoneCode\",\n            name: \"phoneCode\",\n            default: country.phoneCode,\n            validation: \"\",\n            label: \"phoneCode\",\n            minimum: 1,\n            maximum: 40,\n            required: false,\n            add: true,\n            update: true,\n            export: false,\n            view: false,\n          },\n          {\n            type: \"hidden\",\n            placeholder: \"event\",\n            name: \"event\",\n            default: ticket.event._id,\n            validation: \"\",\n            label: \"event\",\n            minimum: 1,\n            maximum: 40,\n            required: false,\n            add: true,\n            export: false,\n            view: false,\n          },\n          {\n            type: \"text\",\n            placeholder: \"Token\",\n            name: \"token\",\n            validation: \"\",\n            default: \"\",\n            label: \"Token\",\n            collection: \"\",\n            showItem: \"\",\n            required: true,\n            view: true,\n            tag: true,\n            export: true,\n          },\n        ];\n\n        const additionalFields = formatArray([...(ticket.type === \"Form\" ? [] : eventForm), ...response.data.response], response.data.ticketData);\n\n        setSubAttributes((prevAttributes) => {\n          const newAttributes = [\n            ...additionalFields,\n            // ...abstractFields,\n            ...baseFields,\n          ];\n          // Only update if new attributes are different\n          return JSON.stringify(prevAttributes) !== JSON.stringify(newAttributes) ? newAttributes : prevAttributes;\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching ticket data:\", error);\n    } finally {\n      props.setLoaderBox(false);\n    }\n  };\n  const getApproved = (id, refreshView, slNo, api) => {\n    props.setLoaderBox(true);\n    postData({ id }, `authentication/${api}`)\n      .then((response) => {\n        props.setLoaderBox(false);\n        if (response.data) {\n          props.setMessage({\n            type: 1,\n            content: response.data.message,\n            icon: \"success\",\n          });\n          if (api === \"approve\") {\n            refreshView(false, slNo, { approve: true });\n          }\n        } else {\n          // Handle the case where response.data is undefined\n          console.error(\"Response data is undefined.\");\n        }\n      })\n      .catch((error) => {\n        props.setLoaderBox(false);\n        // Handle any errors that occur during the API request\n        console.error(\"API request error:\", error);\n      });\n  };\n  return (\n    ((selectedTab !== \"all\" && attributes?.length) || (eventAttributes.length > 0 && selectedTab === \"all\")) && (\n      <ListTable\n        api={`ticket-registration/${selectedTab}`}\n        key={`${selectedTab}`}\n        itemTitle={{\n          name: \"fullName\",\n          type: \"text\",\n          collection: \"authentication\",\n        }}\n        // showFilter={true}\n        shortName={selectedTab === \"all\" ? title : `${ticket.title}`}\n        onFilter={async (data) => {\n          console.log(data);\n          if (data.ticket !== selectedTab) {\n            await UpdateFields(data.ticket);\n            setSelectedTab(data.ticket);\n          }\n        }}\n        formMode={`single`}\n        preFilter={selectedTab === \"all\" ? { event: eventId } : { ticket: selectedTab, event: eventId }}\n        parents={selectedTab === \"all\" ? { event: eventId, type: ticketType } : { type: ticketType, ticket: selectedTab, event: eventId }}\n        bulkUplaod={false}\n        delPrivilege={false}\n        addPrivilege={false}\n        updatePrivilege={false}\n        exportPrivilege={true}\n        viewMode={\"table\"}\n        name={selectedTab + id}\n        actions={actions}\n        {...props}\n        attributes={selectedTab === \"all\" ? eventAttributes : attributes}\n      />\n    )\n  );\n};\n\nexport default Layout(Approval);\n"],"names":["Layout","props","_props$openData","_props$openData$data","_props$openData3","_props$openData3$data","id","actions","useState","element","type","callback","item","data","refreshView","slNo","getApproved","_id","itemTitle","name","collection","condition","if","then","else","icon","title","params","api","parentReference","shortName","addPrivilege","delPrivilege","updatePrivilege","customClass","eventId","openData","ticketType","selectedTab","setSelectedTab","ticket","setTicket","attributes","setSubAttributes","eventAttributes","setEventAttributes","lastFileds","useMemo","placeholder","validation","default","label","minimum","maximum","required","view","tag","export","formatArray","useCallback","eventForm","Array","isArray","map","attribute","formattedAttribute","_ticket$event","conditionEnabled","conditionWhenField","conditionCheckMatch","includes","split","conditionIfMatch","search","filter","sort","apiType","selectApi","toString","value","event","countries","showItem","update","useEffect","_props$openData2","_props$openData2$data","document","getData","response","_response$data","fields","footnote","preFill","add","parentFilter","bulkUpload","setLoaderBox","postData","setMessage","content","message","approve","console","error","catch","length","_jsx","ListTable","onFilter","async","log","_ticket$event$countri","ticketId","ticketData","country","status","baseFields","PhoneNumberLength","phoneCode","additionalFields","prevAttributes","newAttributes","JSON","stringify","UpdateFields","formMode","preFilter","parents","bulkUplaod","exportPrivilege","viewMode"],"sourceRoot":""}