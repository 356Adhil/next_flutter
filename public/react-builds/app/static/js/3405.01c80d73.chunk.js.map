{"version":3,"file":"static/js/3405.01c80d73.chunk.js","mappings":"qRAUA,MA+EA,GAAeA,EAAAA,EAAAA,IA/EFC,KACX,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,MACRC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,OAC5CC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,OAC1BK,EAAQC,IAAaN,EAAAA,EAAAA,UAAS,MAC/BO,GAAcC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMF,eAC1CG,EAAOC,IAAYX,EAAAA,EAAAA,UAASO,GAC7BK,GAAWC,EAAAA,EAAAA,MAkDjB,OAjDAC,EAAAA,EAAAA,YAAU,KA0CJb,GAA+B,OAAlBH,GAzCQiB,WACvB,IAAId,GAA+B,OAAlBH,EAAjB,CAGAI,GAAa,GACb,IACE,IAAIc,EAAWC,OAAOC,SAASF,SACd,cAAbA,GAAqD,KAAzBC,OAAOC,SAASC,OAE9CH,GAAY,IAAIC,OAAOC,SAASC,QAKlC,MAAMC,QAAiBC,EAAAA,EAAAA,IAAQzB,EAAK,CAAE0B,MAAO1B,GAAO,CAAE2B,OAAQP,GAAY,oCAI1E,GAFAjB,EAAiBqB,EAASjB,KAAKL,eAE3BsB,EAASjB,KAAKiB,WAChBhB,EAAQgB,EAASjB,KAAKiB,UACe,UAAjCA,EAASjB,KAAKiB,SAASI,OAAmB,CAAC,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAC5C,MAAMC,EAAY,IACbvB,EACHG,MAAOU,EAASjB,KAAKiB,SAASE,MAAMS,WACpCC,gBAAiBZ,EAASjB,KAAKiB,SAASE,MAAMS,WAC9CE,gBAAiBb,EAASjB,KAAKiB,SAASE,MAAMY,eAC9CC,eAAgBf,EAASjB,KAAKiB,SAASE,MAAMa,eAC7CC,mBAAoBhB,EAASjB,KAAKiB,SAASE,MAAMc,oBAEnDC,SAASC,MAAQ,GAAyB,QAAzBb,EAAGL,EAASjB,KAAKiB,gBAAQ,IAAAK,GAAO,QAAPC,EAAtBD,EAAwBH,aAAK,IAAAI,OAAP,EAAtBA,EAA+BY,QACnDC,QAAQC,IAAI,eAAsC,QAAxBb,EAAEP,EAASjB,KAAKiB,gBAAQ,IAAAO,GAAO,QAAPC,EAAtBD,EAAwBL,aAAK,IAAAM,OAAP,EAAtBA,EAA+BU,OAE3D3B,EAASmB,GACTxB,EAA+B,QAAtBuB,EAACT,EAASjB,KAAKsC,eAAO,IAAAZ,EAAAA,EAAI,GACrC,CAEJ,CAAE,MAAOa,GACPH,QAAQG,MAAM,2BAA4BA,GAC1C3C,EAAiB,KACnB,CApCA,CAoCA,EAKA4C,EACF,GACC,CAAC/B,EAAUX,EAAWM,EAAaT,EAAeF,IAE9CA,EACLS,GAAUF,IAAQyC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACnC,MAAOA,EAAOL,OAAQA,EAAQF,KAAMA,KAE7DyC,EAAAA,EAAAA,KAACE,EAAAA,SAAc,CAAAC,SACM,OAAlBjD,GACC8C,EAAAA,EAAAA,KAACI,EAAAA,EAAM,IACLlD,EACa,UAAfK,EAAKqB,OACHoB,EAAAA,EAAAA,KAACK,EAAAA,EAAK,KAENL,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACnC,MAAOA,EAAOL,OAAQA,EAAQF,KAAMA,KAG7C+C,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CAACC,MAAO,CAAEC,OAAQ,OAAQC,QAAS,OAAQC,OAAQ,QAASC,cAAe,SAAUC,IAAK,QAAUC,UAAU,sBAAqBX,SAAA,EACxIH,EAAAA,EAAAA,KAAA,OAAKe,IAAKC,EAAAA,GAAMC,IAAI,gBAAoB,cAAY5C,OAAOC,SAASF,SAAS,2BAIpF,G","sources":["components/project/pages/landing/demo.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getData } from \"../../../../backend/api\";\nimport Login from \"../../../public/login\";\nimport Event from \"./event\";\nimport Loader from \"../../../core/loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { NoData } from \"../../../core/list/styles\";\nimport { logo } from \"../../../../images\";\nimport { useParams } from \"react-router-dom\";\nimport Layout from \"../../../core/layout\";\nconst Demo = () => {\n  const { id } = useParams();\n  const [isWhitelisted, setIsWhitelisted] = useState(null);\n  const [isLoading, setisLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [config, setConfig] = useState(null);\n  const themeColors = useSelector((state) => state.themeColors);\n  const [theme, setTheme] = useState(themeColors);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const getCurrentDomain = async () => {\n      if (isLoading || isWhitelisted !== null) {\n        return;\n      }\n      setisLoading(true);\n      try {\n        let hostname = window.location.hostname;\n        if (hostname === \"localhost\" && window.location.port !== \"\") {\n          // Append port number if not default for localhost\n          hostname += `:${window.location.port}`;\n        }\n\n        // Check if isWhitelisted is already set\n\n        const response = await getData(id ? { event: id } : { domain: hostname }, \"whitelisted-domains/check-domain\");\n\n        setIsWhitelisted(response.data.isWhitelisted);\n\n        if (response.data.response) {\n          setData(response.data.response);\n          if (response.data.response.route === \"event\") {\n            const tempTheme = {\n              ...themeColors,\n              theme: response.data.response.event.themeColor,\n              themeBackground: response.data.response.event.themeColor,\n              themeForeground: response.data.response.event.themeTextColor,\n              secondaryColor: response.data.response.event.secondaryColor,\n              secondaryTextColor: response.data.response.event.secondaryTextColor,\n            };\n            document.title = `${response.data.response?.event?.title}`;\n            console.log(\"Event title:\", response.data.response?.event?.title);\n            // dispatch(changeThemeColor(tempTheme));\n            setTheme(tempTheme);\n            setConfig(response.data.configs ?? []);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error validating domain:\", error);\n        setIsWhitelisted(null);\n      }\n    };\n    if (isLoading || isWhitelisted !== null) {\n      return;\n    } else {\n      getCurrentDomain();\n    }\n  }, [dispatch, isLoading, themeColors, isWhitelisted, id]);\n\n  return id ? (\n    config && data && <Event theme={theme} config={config} data={data}></Event>\n  ) : (\n    <React.Fragment>\n      {isWhitelisted === null ? (\n        <Loader />\n      ) : isWhitelisted ? (\n        data.route === \"admin\" ? (\n          <Login></Login>\n        ) : (\n          <Event theme={theme} config={config} data={data}></Event>\n        )\n      ) : (\n        <NoData style={{ margin: \"auto\", display: \"flex\", height: \"100vh\", flexDirection: \"column\", gap: \"10px\" }} className=\"noshadow white-list\">\n          <img src={logo} alt=\"EventHex.co\"></img>The domain {window.location.hostname} is not connfigured!\n        </NoData>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Layout(Demo);\n"],"names":["Layout","Demo","id","useParams","isWhitelisted","setIsWhitelisted","useState","isLoading","setisLoading","data","setData","config","setConfig","themeColors","useSelector","state","theme","setTheme","dispatch","useDispatch","useEffect","async","hostname","window","location","port","response","getData","event","domain","route","_response$data$respon","_response$data$respon2","_response$data$respon3","_response$data$respon4","_response$data$config","tempTheme","themeColor","themeBackground","themeForeground","themeTextColor","secondaryColor","secondaryTextColor","document","title","console","log","configs","error","getCurrentDomain","_jsx","Event","React","children","Loader","Login","_jsxs","NoData","style","margin","display","height","flexDirection","gap","className","src","logo","alt"],"sourceRoot":""}