{"version":3,"file":"static/js/140.c0d800e7.chunk.js","mappings":"mNAMA,MAgNA,GAAeA,EAAAA,EAAAA,IAhNGC,KAEhBC,EAAAA,EAAAA,YAAU,KACRC,SAASC,MAAQ,6BAA6B,GAC7C,IAEH,MAAOC,IAAcC,EAAAA,EAAAA,UAAS,CAC5B,CAEEC,KAAM,OAENC,YAAa,OAEbC,KAAM,OAENC,WAAY,GAEZC,QAAS,GAETC,MAAO,OAEPC,UAAU,EAEVC,MAAM,EAENC,KAAK,EAELC,QAAQ,GAEV,CACET,KAAM,OACNC,YAAa,eACbC,KAAM,kBACNC,WAAY,GACZC,QAAS,GACTM,KAAK,EACLL,MAAO,eACPC,UAAU,EACVC,MAAM,EACNC,KAAK,EACLC,QAAQ,KAiJZ,OACEE,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAACC,UAAU,WAAUC,UAE7BH,EAAAA,EAAAA,KAACI,EAAAA,EAGC,CACAC,cAAc,SAEdC,IAAK,YAELC,UAAW,CAAEhB,KAAM,OAAQF,KAAM,OAAQmB,WAAY,IAErDC,UAAW,UAEP1B,EAEJI,WAAYA,KAEJ,G","sources":["components/project/pages/user/userType/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../../../../core/layout\";\nimport ListTable from \"../../../../core/list/list\";\nimport { Container } from \"../../../../core/layout/styels\";\n//src/components/styles/page/index.js\n//if you want to write custom style wirte in above file\nconst UserType = (props) => {\n  //to update the page title\n  useEffect(() => {\n    document.title = `User Type - EventHex Portal`;\n  }, []);\n\n  const [attributes] = useState([\n    {\n      // Type of input, in this case, a text input\n      type: \"text\",\n      // Placeholder text for the input field\n      placeholder: \"Role\",\n      // Name of the input field\n      name: \"role\",\n      // Validation rules for the input\n      validation: \"\",\n      // Default value for the input field\n      default: \"\",\n      // Label text for the input field\n      label: \"Role\",\n      // Indicates if the input field is required\n      required: true,\n      // Indicates if the input field should be displayed in the view mode\n      view: true,\n      // Indicates if the input field should be displayed in the add mode\n      add: true,\n      // Indicates if the input field should be displayed in the update mode\n      update: true,\n    },\n    {\n      type: \"text\",\n      placeholder: \"Display Name\",\n      name: \"roleDisplayName\",\n      validation: \"\",\n      default: \"\",\n      tag: true,\n      label: \"Display Name\",\n      required: true,\n      view: true,\n      add: true,\n      update: true,\n    },\n  ]);\n  // const [timingAttributes] = useState([\n  //   {\n  //     type: \"text\",\n  //     placeholder: \"Label\",\n  //     name: \"label\",\n  //     validation: \"\",\n  //     default: \"\",\n  //     tag: true,\n  //     label: \"Label\",\n  //     required: true,\n  //     view: true,\n  //     add: true,\n  //     update: true,\n  //   },\n  //   {\n  //     type: \"number\",\n  //     placeholder: \"Sequence\",\n  //     name: \"sequence\",\n  //     validation: \"\",\n  //     default: \"\",\n  //     tag: true,\n  //     label: \"Sequence\",\n  //     required: true,\n  //     view: true,\n  //     add: true,\n  //     update: true,\n  //   },\n  //   {\n  //     type: \"text\",\n  //     placeholder: \"Icon\",\n  //     name: \"icon\",\n  //     validation: \"\",\n  //     default: \"\",\n  //     tag: true,\n  //     label: \"Icon\",\n  //     required: true,\n  //     view: true,\n  //     add: true,\n  //     update: true,\n  //   },\n  //   {\n  //     type: \"text\",\n  //     placeholder: \"Path\",\n  //     name: \"path\",\n  //     validation: \"\",\n  //     default: \"\",\n  //     tag: true,\n  //     label: \"Path\",\n  //     required: true,\n  //     view: true,\n  //     add: true,\n  //     update: true,\n  //   },\n  //   {\n  //     type: \"text\",\n  //     placeholder: \"Element Name\",\n  //     name: \"element\",\n  //     validation: \"\",\n  //     default: \"\",\n  //     tag: true,\n  //     label: \"Element Name\",\n  //     required: true,\n  //     view: true,\n  //     add: true,\n  //     update: true,\n  //   },\n  //   {\n  //     type: \"checkbox\",\n  //     placeholder: \"Status\",\n  //     name: \"status\",\n  //     validation: \"\",\n  //     default: \"true\",\n  //     tag: true,\n  //     label: \"Status\",\n  //     required: true,\n  //     view: true,\n  //     add: true,\n  //     update: true,\n  //   },\n  //   {\n  //     type: \"checkbox\",\n  //     placeholder: \"Is Link\",\n  //     name: \"isLink\",\n  //     validation: \"\",\n  //     default: \"false\",\n  //     tag: true,\n  //     label: \"Is Link\",\n  //     required: true,\n  //     view: true,\n  //     add: true,\n  //     update: true,\n  //   },\n  // ]);\n\n  // const [actions] = useState([\n  //   {\n  //     // Element type for rendering\n  //     element: \"button\",\n  //     // Type of action, in this case a sublist\n  //     type: \"subList\",\n  //     // Unique identifier for the submenu\n  //     id: \"sub-menu-1\",\n  //     // Displayed item title\n  //     // itemTitle: \"title\",\n  //     itemTitle: {\n  //       name: \"typeOfDietName\",\n  //       type: \"text\",\n  //       collection: \"typeOfDiet\",\n  //     },\n  //     // Title of the submenu\n  //     title: \"Order\",\n  //     // Additional attributes for timing\n  //     attributes: timingAttributes,\n  //     // Parameters for API and submenu configuration\n  //     params: {\n  //       // API endpoint for submenu data\n  //       api: `user-type-1`,\n  //       // Parent reference for the submenu\n  //       parentReference: \"menu\",\n  //       // Property name for the submenu item title\n  //       // itemTitle: \"label\",\n  //       itemTitle: {\n  //         name: \"typeOfDietName\",\n  //         type: \"text\",\n  //         collection: \"typeOfDiet\",\n  //       },\n  //       // Short name for the submenu\n  //       shortName: \"Sub Menu\",\n  //       // Privileges for adding submenu items\n  //       addPrivilege: true,\n  //       // Privileges for deleting submenu items\n  //       delPrivilege: true,\n  //       // Privileges for updating submenu items\n  //       updatePrivilege: true,\n  //       // Custom CSS class for styling\n  //       customClass: \"medium\",\n  //       formMode: \"double\",\n  //     },\n  //   },\n  // ]);\n  // Use the useTranslation hook from react-i18next to handle translations\n  // const parkingDuration = totalDuration > 120 ? (days > 0 ? days + `d, ` : ``) + (hours > 0 ? hours + `h, ` : ``) + (minutes + t(\"m\")) : totalDuration.toFixed(0) + ` ` + t(\"minutes\");\n  return (\n    <Container className=\"noshadow\">\n      {/* Render a ListTable component */}\n      <ListTable\n        // Actions to be displayed in the ListTable\n        // actions={actions}\n        // actions={actions}\n        displayColumn=\"double\"\n        // API endpoint for fetching menu data\n        api={`user-type`}\n        // Property name for the title of each menu item\n        itemTitle={{ name: \"role\", type: \"text\", collection: \"\" }}\n        // Short name or label for the menu\n        shortName={`Role`}\n        // Privilege flag indicating whether the user can add menu items\n        {...props}\n        // Additional attributes related to the menu\n        attributes={attributes}\n      ></ListTable>\n    </Container>\n  );\n};\n// exporting the page with parent container layout..\nexport default Layout(UserType);\n"],"names":["Layout","props","useEffect","document","title","attributes","useState","type","placeholder","name","validation","default","label","required","view","add","update","tag","_jsx","Container","className","children","ListTable","displayColumn","api","itemTitle","collection","shortName"],"sourceRoot":""}