{"version":3,"file":"static/js/8210.5f7d0b24.chunk.js","mappings":"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","sources":["components/project/pages/event/registrations/index.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Layout from \"../../../../core/layout\";\nimport ListTable from \"../../../../core/list/list\";\nimport { getData } from \"../../../../../backend/api\";\n\nconst Attendee = (props) => {\n  const { id } = props;\n  const eventId = props?.openData?.data?._id;\n  const { title, ticketType } = props;\n  const [selectedTab, setSelectedTab] = useState(\"all\");\n  const [ticket, setTicket] = useState(null);\n  const [attributes, setSubAttributes] = useState(null);\n  const [eventAttributes, setEventAttributes] = useState([]);\n  const lastFileds = useMemo(\n    () => [\n      {\n        type: \"datetime\",\n        placeholder: \"Registration Time\",\n        name: \"createdAt\",\n        validation: \"\",\n        default: \"\",\n        label: \"Registration Time\",\n        minimum: 0,\n        maximum: 16,\n        required: true,\n        view: true,\n        tag: true,\n        export: false,\n      },\n    ],\n    []\n  );\n  const formatArray = useCallback(\n    (eventForm, ticket) => {\n      if (!Array.isArray(eventForm)) return [];\n\n      const formFields = eventForm.map((attribute) => {\n        const formattedAttribute = { ...attribute };\n\n        if (formattedAttribute.conditionEnabled) {\n          formattedAttribute.condition = {\n            item: formattedAttribute.conditionWhenField,\n            if: formattedAttribute.conditionCheckMatch.includes(\",\") ? formattedAttribute.conditionCheckMatch.split(\",\") : [formattedAttribute.conditionCheckMatch],\n            then: formattedAttribute.conditionIfMatch === \"enabled\" ? \"enabled\" : \"disabled\",\n            else: formattedAttribute.conditionIfMatch === \"enabled\" ? \"disabled\" : \"enabled\",\n          };\n        }\n\n        if (formattedAttribute.type === \"select\") {\n          formattedAttribute.search = true;\n          formattedAttribute.filter = true;\n        } else {\n          formattedAttribute.filter = false;\n        }\n        if (![\"file\", \"image\"].includes(formattedAttribute.name)) {\n          formattedAttribute.sort = true;\n        }\n\n        if (formattedAttribute.type === \"multiSelect\") {\n          if (formattedAttribute.apiType === \"CSV\") {\n            formattedAttribute.selectApi = formattedAttribute.selectApi\n              .toString()\n              .split(\",\")\n              .map((item) => ({\n                id: item,\n                value: item,\n              }));\n            formattedAttribute.apiType = \"JSON\";\n          }\n          formattedAttribute.default = \"\";\n        }\n\n        if ([\"firstName\", \"authenticationId\", \"emailId\"].includes(formattedAttribute.name)) {\n          formattedAttribute.collection = \"\";\n          if (formattedAttribute.name === \"authenticationId\" && ticket?.event?.countries) {\n            formattedAttribute.countries = ticket.event.countries;\n          }\n        } else {\n          formattedAttribute.collection = \"formData\";\n        }\n\n        formattedAttribute.showItem = formattedAttribute.name;\n        formattedAttribute.update = true;\n        if (!formattedAttribute.type === \"title\" && !formattedAttribute.type === \"info\") {\n          formattedAttribute.tag = true;\n          formattedAttribute.view = true;\n        }\n        formattedAttribute.export = true;\n\n        return formattedAttribute;\n      });\n\n      return [...formFields, ...lastFileds];\n    },\n    [lastFileds]\n  );\n\n  useEffect(() => {\n    document.title = `${title} - EventHex Portal`;\n    getData({ event: props?.openData?.data?._id }, \"event-form-fields\").then((response) => {\n      const fields = formatArray(response?.data?.response);\n      const base = [\n        {\n          type: \"select\",\n          footnote: \"\",\n          placeholder: \"Choose Ticket\",\n          name: \"ticket\",\n          validation: \"\",\n          label: \"Select Ticket\",\n          showItem: \"value\",\n          default: \"all\",\n          value: \"all\",\n          preFill: [\n            {\n              id: \"all\",\n              value: \"All\",\n            },\n          ],\n          required: false,\n          view: false,\n          filter: true,\n          add: false,\n          update: true,\n          apiType: \"API\",\n          selectApi: \"ticket/select/\" + eventId + \"/\" + ticketType,\n          parentFilter: true,\n          export: false,\n        },\n        {\n          type: \"text\",\n          placeholder: \"Ticket\",\n          name: \"showticket\",\n          validation: \"\",\n          collection: \"ticket\",\n          showItem: \"title\",\n          default: \"\",\n          label: \"Ticket\",\n          minimum: 0,\n          maximum: 16,\n          required: true,\n          add: true,\n          view: true,\n          bulkUpload: true,\n          tag: true,\n        },\n      ];\n      setEventAttributes([...base, ...fields]);\n    });\n  }, [props?.openData?.data?._id, formatArray, title, eventId, selectedTab, ticketType]);\n\n  const UpdateFields = async (ticketId) => {\n    props.setLoaderBox(true);\n    try {\n      const response = await getData({ ticket: ticketId, eventId }, \"ticket-form-data\");\n      const { ticketData: ticket, eventForm } = response.data;\n      const country = ticket.event.countries[0] ?? [];\n      setTicket(ticket);\n      if (response.status === 200) {\n        const baseFields = [\n          {\n            type: \"select\",\n            footnote: \"\",\n            placeholder: \"Choose Ticket\",\n            name: \"ticket\",\n            validation: \"\",\n            default: ticketId,\n            value: ticketId,\n            label: \"Select Ticket\",\n            // selectType: \"tabs\",\n            showItem: \"value\",\n            required: false,\n            preFill: [\n              {\n                id: \"all\",\n                value: \"All\",\n              },\n            ],\n            view: true,\n            tag: false,\n            filter: true,\n            add: false,\n            update: false,\n            apiType: \"API\",\n            selectApi: \"ticket/select/\" + eventId + \"/\" + ticketType,\n            parentFilter: true,\n            export: false,\n          },\n          {\n            type: \"hidden\",\n            placeholder: \"PhoneNumberLength\",\n            name: \"PhoneNumberLength\",\n            validation: \"\",\n            showItem: \"PhoneNumberLength\",\n            collection: \"formData\",\n            default: country.PhoneNumberLength,\n            label: \"PhoneNumberLength\",\n            minimum: 1,\n            maximum: 40,\n            required: false,\n            add: true,\n            update: true,\n            export: false,\n            view: false,\n          },\n          {\n            type: \"hidden\",\n            placeholder: \"phoneCode\",\n            name: \"phoneCode\",\n            default: country.phoneCode,\n            validation: \"\",\n            label: \"phoneCode\",\n            minimum: 1,\n            maximum: 40,\n            required: false,\n            add: true,\n            update: true,\n            export: false,\n            view: false,\n          },\n          {\n            type: \"hidden\",\n            placeholder: \"event\",\n            name: \"event\",\n            default: ticket.event._id,\n            validation: \"\",\n            label: \"event\",\n            minimum: 1,\n            maximum: 40,\n            required: false,\n            add: true,\n            export: false,\n            view: false,\n          },\n          {\n            type: \"text\",\n            placeholder: \"Token\",\n            name: \"token\",\n            validation: \"\",\n            default: \"\",\n            label: \"Token\",\n            collection: \"\",\n            showItem: \"\",\n            required: true,\n            view: true,\n            tag: true,\n            export: true,\n          },\n        ];\n\n        const additionalFields = formatArray([...(ticket.type === \"Form\" ? [] : eventForm), ...response.data.response],response.data.ticketData);\n\n        setSubAttributes((prevAttributes) => {\n          const newAttributes = [\n            ...additionalFields,\n            // ...abstractFields,\n            ...baseFields,\n          ];\n          // Only update if new attributes are different\n          return JSON.stringify(prevAttributes) !== JSON.stringify(newAttributes) ? newAttributes : prevAttributes;\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching ticket data:\", error);\n    } finally {\n      props.setLoaderBox(false);\n    }\n  };\n\n  return (\n    ((selectedTab !== \"all\" && attributes?.length) || (eventAttributes.length > 0 && selectedTab === \"all\")) && (\n      <ListTable\n        api={`ticket-registration/${selectedTab}`}\n        key={`${selectedTab}`}\n        itemTitle={{\n          name: \"fullName\",\n          type: \"text\",\n          collection: \"authentication\",\n        }}\n        // showFilter={true}\n        shortName={selectedTab === \"all\" ? title : `${ticket.title}`}\n        onFilter={async (data) => {\n          console.log(data);\n          if (data.ticket !== selectedTab) {\n            await UpdateFields(data.ticket);\n            setSelectedTab(data.ticket);\n          }\n        }}\n        formMode={`single`}\n        preFilter={selectedTab === \"all\" ? { event: eventId } : { ticket: selectedTab, event: eventId }}\n        parents={selectedTab === \"all\" ? { event: eventId, type: ticketType } : { type: ticketType, ticket: selectedTab, event: eventId }}\n        bulkUplaod={selectedTab === \"all\" ? false : true}\n        delPrivilege={selectedTab === \"all\" ? false : true}\n        addPrivilege={selectedTab === \"all\" ? false : true}\n        updatePrivilege={selectedTab === \"all\" ? false : true}\n        exportPrivilege={true}\n        viewMode={\"table\"}\n        name={selectedTab+id}\n        {...props}\n        attributes={selectedTab === \"all\" ? eventAttributes : attributes}\n      />\n    )\n  );\n};\n\nexport default Layout(Attendee);\n"],"names":["Layout","props","_props$openData","_props$openData$data","_props$openData3","_props$openData3$data","id","eventId","openData","data","_id","title","ticketType","selectedTab","setSelectedTab","useState","ticket","setTicket","attributes","setSubAttributes","eventAttributes","setEventAttributes","lastFileds","useMemo","type","placeholder","name","validation","default","label","minimum","maximum","required","view","tag","export","formatArray","useCallback","eventForm","Array","isArray","map","attribute","formattedAttribute","_ticket$event","conditionEnabled","condition","item","conditionWhenField","if","conditionCheckMatch","includes","split","then","conditionIfMatch","else","search","filter","sort","apiType","selectApi","toString","value","collection","event","countries","showItem","update","useEffect","_props$openData2","_props$openData2$data","document","getData","response","_response$data","fields","footnote","preFill","add","parentFilter","bulkUpload","length","_jsx","ListTable","api","itemTitle","shortName","onFilter","async","console","log","setLoaderBox","_ticket$event$countri","ticketId","ticketData","country","status","baseFields","PhoneNumberLength","phoneCode","additionalFields","prevAttributes","newAttributes","JSON","stringify","error","UpdateFields","formMode","preFilter","parents","bulkUplaod","delPrivilege","addPrivilege","updatePrivilege","exportPrivilege","viewMode"],"sourceRoot":""}